{"version":3,"sources":["store/employees/state.ts","store/employees/reducers.ts","store/employees/selectors.ts","store/employees/index.ts","store/index.ts","api/index.ts","app.tsx","store/employees/action-creators.ts","service-worker.ts","index.tsx"],"names":["initialState","collection","status","pending","error","selected","getEmployees","state","resolveEmployees","action","payload","rejectEmployees","setSelected","isPending","getSelected","filter","key","includes","createSlice","reducers","slice","actions","reducer","store","configureStore","employees","firstNames","surnames","getRandomItem","array","Math","round","random","length","a","Promise","resolve","setTimeout","Array","fill","map","toString","firstName","surname","age","Header","Layout","Content","Title","Typography","columns","title","dataIndex","App","dispatch","useDispatch","useEffect","getEmployeesApi","rowSelection","useMemo","onChange","selectedKeys","getCheckboxProps","record","name","useSelector","selectors","dataSource","pagination","loading","footer","join","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.519d6164.chunk.js","sourcesContent":["import { Employee } from '../../types';\n\nexport interface State {\n  collection: Array<Employee>,\n  status: {\n    pending: boolean,\n    error: boolean,\n  },\n  selected: Array<string>,\n}\n\nconst initialState: State = {\n  collection: [],\n  status: {\n    pending: false,\n    error: false,\n  },\n  selected: [],\n};\n\nexport default initialState;\n","import { CaseReducer, ActionCreatorWithOptionalPayload } from 'redux-starter-kit';\nimport { State } from './state';\n\nconst getEmployees: CaseReducer<State, ActionCreatorWithOptionalPayload<State>> = (state) => ({\n  ...state,\n  collection: [],\n  status: {\n    pending: true,\n    error: false,\n  },\n});\n\nconst resolveEmployees: CaseReducer<State> = (state, action) => ({\n  ...state,\n  collection: action.payload,\n  status: {\n    pending: false,\n    error: false,\n  },\n});\n\nconst rejectEmployees: CaseReducer<State, ActionCreatorWithOptionalPayload<State>> = (state) => ({\n  ...state,\n  status: {\n    pending: false,\n    error: true,\n  },\n});\n\nconst setSelected: CaseReducer<State> = (state, action) => ({\n  ...state,\n  selected: action.payload,\n});\n\nexport {\n  getEmployees,\n  resolveEmployees,\n  rejectEmployees,\n  setSelected,\n};\n","import { State } from './state';\n\nconst getEmployees = (state: State): typeof state.collection => state.collection;\n\nconst isPending = (state: State): boolean => state.status.pending;\n\nconst getSelected = (state: State): typeof state.collection => {\n  const { selected, collection } = state;\n  return collection.filter(({ key }) => selected.includes(key));\n};\n\nexport {\n  getEmployees,\n  isPending,\n  getSelected,\n};\n","import { createSlice } from 'redux-starter-kit';\nimport initialState from './state';\nimport * as reducers from './reducers';\nimport * as selectors from './selectors';\n\nconst slice = 'employees';\n\nconst { actions, reducer } = createSlice({\n  initialState,\n  reducers,\n  slice,\n});\n\n\nexport default reducer;\nexport {\n  slice,\n  initialState,\n  actions,\n  selectors,\n};\n","import { configureStore } from 'redux-starter-kit';\nimport employees from './employees';\n\nconst store = configureStore({\n  reducer: employees,\n});\n\nexport default store;\n","import { Employee } from '../types';\n\nconst firstNames: Array<string> = ['Mike', 'John', 'Bob', 'Tom', 'Devid'];\nconst surnames: Array<string> = ['Smith', 'Doe', 'Snow', 'Lee', 'Johnson'];\n\nconst getRandomItem = (array: Array<string>): string => (\n  array[Math.round(Math.random() * (array.length - 1))]\n);\n\nconst genereteEmployees = (count: number): Array<Employee> => (\n  Array(count)\n    .fill(null)\n    .map(() => ({\n      key: Math.random().toString(),\n      firstName: getRandomItem(firstNames),\n      surname: getRandomItem(surnames),\n      age: Math.round(Math.random() * 80 + 18),\n    }))\n);\n\nexport type Response = Array<Employee>;\n\nconst getEmployees = async (): Promise<Response> => {\n  await new Promise((resolve) => setTimeout(resolve, 2000));\n  return genereteEmployees(20);\n};\n\nexport default getEmployees;\n","import React, { useEffect, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Layout from 'antd/es/layout';\nimport Typography from 'antd/es/typography';\nimport Table from 'antd/es/table';\nimport { ColumnProps, TableRowSelection } from 'antd/lib/table/interface';\nimport { getEmployees } from './store/employees/action-creators';\nimport { selectors, actions } from './store/employees';\nimport 'antd/es/layout/style/css';\nimport 'antd/es/table/style/css';\nimport './app.css';\nimport { Employee } from './types';\n\nconst { Header, Content } = Layout;\nconst { Title } = Typography;\n\nconst columns: Array<ColumnProps<Employee>> = [\n  {\n    title: 'First name',\n    dataIndex: 'firstName',\n  },\n  {\n    title: 'Surname',\n    dataIndex: 'surname',\n  },\n  {\n    title: 'Age',\n    dataIndex: 'age',\n  },\n];\n\nconst App: React.FC = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getEmployees());\n  }, [dispatch]);\n\n  const rowSelection = useMemo((): TableRowSelection<Employee> => ({\n    onChange: (selectedKeys) => {\n      dispatch(actions.setSelected(selectedKeys || []));\n    },\n    getCheckboxProps: (record) => ({\n      name: record.key,\n    }),\n  }), [dispatch]);\n\n  const employees = useSelector<any, Array<Employee>>(selectors.getEmployees);\n  const isPending = useSelector<any, boolean>(selectors.isPending);\n  const selected = useSelector<any, Array<Employee>>(selectors.getSelected);\n\n  return (\n    <Layout>\n      <Header>\n        <Title>\n          Employees\n        </Title>\n      </Header>\n      <Content>\n        <Table\n          dataSource={employees}\n          columns={columns}\n          pagination={false}\n          rowSelection={rowSelection}\n          loading={isPending}\n          footer={() => (\n            <div>\n              <b>Users: </b>\n              {selected.map(({ firstName }) => firstName).join(', ') || 'No selected'}\n            </div>\n          )}\n        />\n      </Content>\n    </Layout>\n  );\n};\n\nexport default App;\n","import { Action } from 'redux-starter-kit';\nimport { ThunkAction } from 'redux-thunk';\nimport { actions } from '.';\nimport getEmployeesApi from '../../api';\nimport { State } from './state';\n\ntype AppAction = ThunkAction<void, State, null, Action<string>>;\n\nconst getEmployees = (): AppAction => async (dispatch) => {\n  dispatch(actions.getEmployees());\n  const employees = await getEmployeesApi();\n  dispatch(actions.resolveEmployees(employees));\n};\n\nexport default null;\nexport {\n  getEmployees,\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\n/* eslint-disable */\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n\n/* eslint-enable */\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport App from './app';\nimport * as serviceWorker from './service-worker';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}